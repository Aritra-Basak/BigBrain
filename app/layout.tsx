
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { ConvexClientProvider } from "./ConvexClientProvider";
import Header from "./header";
import { Toaster } from "@/components/ui/toaster"
import { Suspense } from "react";

import { Loader } from "@/components/loader";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
//The below function takes children as a prop and Readonly<{}> makes the props immutable
// React.ReactNode is a type that represents any content that can be rendered in React
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ConvexClientProvider>
          <Header />
          <Suspense fallback={<Loader />}>
            {children}
          </Suspense>
          <Toaster />
        </ConvexClientProvider>      
      </body>
    </html>
  );
}


// The layout.tsx file is used to define a common layout for a group of pages. 
// It allows you to share UI elements (like headers, footers, or sidebars) across multiple pages without repeating code.

// The Layout.tsx wraps around the content of the pages.tsx.
// The children prop represents the content of the specific page that is being rendered within this layout.
